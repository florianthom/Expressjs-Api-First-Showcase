/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/v1/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all articles */
        get: operations["getAllArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        PaginationFilter: {
            /**
             * Format: int32
             * @default 10
             */
            pageSize: number;
            /**
             * Format: int32
             * @default 0
             */
            pageNumber: number;
        };
        PageInfo: {
            /** Format: int32 */
            pageSize?: number;
            /**
             * Format: int32
             * @description First page number: 0
             */
            pageNumber?: number;
            /**
             * Format: uri
             * @description Null if no previous page available
             */
            previousPage?: string;
            /**
             * Format: uri
             * @description Null if no next page available
             */
            nextPage?: string;
            /** Format: int64 */
            itemsTotal?: number;
            /** Format: int32 */
            pagesTotal?: number;
        };
        Article: {
            /** Format: date-time */
            createdAt?: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt?: string;
            updatedBy?: string;
            /** Format: uuid */
            id?: string;
            deleted?: boolean;
        };
        ArticleQueryFilter: {
            /**
             * Format: uuid
             * @default null
             */
            articleId: string;
        };
        PageArticleList: components["schemas"]["PageInfo"] & {
            data?: components["schemas"]["Article"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type PaginationFilter = components['schemas']['PaginationFilter'];
export type PageInfo = components['schemas']['PageInfo'];
export type Article = components['schemas']['Article'];
export type ArticleQueryFilter = components['schemas']['ArticleQueryFilter'];
export type PageArticleList = components['schemas']['PageArticleList'];
export type $defs = Record<string, never>;
export interface operations {
    getAllArticle: {
        parameters: {
            query?: {
                articleQueryFilterDto?: components["schemas"]["ArticleQueryFilter"];
                paginationFilterDto?: components["schemas"]["PaginationFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageArticleList"];
                };
            };
            /** @description Unexpected Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
